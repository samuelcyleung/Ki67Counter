install.packages("~/workspace/R/biostat/data/ki67p3_2016-02-23.tar.gz", repos = NULL, type = "source")
install.packages("~/workspace/R/biostat/data/ki67p3b_2017-06-05.tar.gz", repos = NULL, type = "source")
quit()
library(ki67p3)
data("ki67p3.raw.d")
data("ki67p3.ug.d")
data("ki67p3.wg.d")
ki67p3.raw.d[1:3,]
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
ki67p3.raw.d[1:6,]
ki67p3.ug.d$A
ki67p3.ug.d["TB016","A"]
ki67p3.wg.d["TB016","A"]
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
fields
fields <- list(
c("pCount"=8,"nCount"=92,"type"="Ki67Score.FIELD_TYPE_MED"),
c("pCount"=11,"nCount"=89,"type"="Ki67Score.FIELD_TYPE_LOW"),
c("pCount"=5,"nCount"=95,"type"="Ki67Score.FIELD_TYPE_LOW"),
c("pCount"=5,"nCount"=95,"type"="Ki67Score.FIELD_TYPE_LOW")
)
fields
sink()
fields
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
format(7.25,digits=1)
format(7.25,digits=2)
round(7.25,digits=1)
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
help("round")
Math.round(7.25,1)
endsWith(7.25,5)
endsWith(as.character(7.25),5)
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
quit()
# generate test data
# first use phase 3A data
library(ki67p3)
data("ki67p3.raw.d")
data("ki67p3.ug.d")
data("ki67p3.wg.d")
OUTPUT_DIR <- "/home/samuelc/workspace/js/Ki67Counter/test cases/unit_tests/spec"
print_sa_header <- function(){
cat(
"describe(\"ScoringFieldsAllocator\", function() {\n",
"  var ScoringFieldsAllocator = require(\"../lib/scoringFieldsAllocator\").ScoringFieldsAllocator\n",
"  var scoringFieldsAllocator;\n",
"  beforeEach(function() {\n",
"});\n")
}
print_sa_footer <- function(){
cat("});")
}
print_sa_test_case <- function(desc,pNeg,pLow,pMed,pHigh,nNeg,nLow,nMed,nHigh) {
cat(
"  it(\"",desc,"\", function() {\n",
"    scoringFieldsAllocator = new ScoringFieldsAllocator();\n",
"    scoringFieldsAllocator.init(",pNeg,",",pLow,",",pMed,",",pHigh,");\n",
"    expect(scoringFieldsAllocator.getNumNegligible()).toEqual(",nNeg,");\n",
"    expect(scoringFieldsAllocator.getNumLow()).toEqual(",nLow,");\n",
"    expect(scoringFieldsAllocator.getNumMedium()).toEqual(",nMed,");\n",
"    expect(scoringFieldsAllocator.getNumHigh()).toEqual(",nHigh,");\n",
"  });\n"
)
}
print_ks_header <- function(){
cat(
"describe(\"Ki67Score\", function() {\n",
"  var Ki67Score = require(\"../lib/ki67Score\").Ki67Score\n",
"  var ki67Score;\n",
"\n",
"  beforeEach(function() {\n",
"});\n"
)
}
print_ks_test_case <-function(desc,pNeg,pLow,pMed,pHigh,
fields,
ug,wg){
cat(
"it(\"",desc,"\", function() {\n",
"   ki67Score = new Ki67Score(",pNeg,",",pLow,",",pMed,",",pHigh,");\n",
"\n")
for (field in fields) {
cat("    ki67Score.addField(",field["nCount"],",",field["pCount"],",",field["type"],");\n")
}
cat(
"  expect(Math.abs(ki67Score.getGlobalScore()-",ug,")).toBeLessThan(0.1);\n",
"  expect(Math.abs(ki67Score.getWeightedGlobalScore()-",wg,")).toBeLessThan(0.1);\n",
"});\n")
}
print_ks_footer <- function(){
cat("});")
}
ls
ki67p3.raw.d[1:3,]
unique(ki67p3.raw.d$deid)
ki67p3.raw.d$surgical.number[which(ki67p3.raw.d$deid==lab)]
lab <- "A"
ki67p3.raw.d$surgical.number[which(ki67p3.raw.d$deid==lab)]
unique(ki67p3.raw.d$surgical.number[which(ki67p3.raw.d$deid==lab)])
acc_num <- "TB016"
fields <- list()
lab
acc_num
temp <- ki67p3.raw.d[which(ki67p3.raw.d$deid==lab & ki67p3.raw.d$surgical.number==acc_num),]
dim(temp)
temp
temp <- ki67p3.raw.d[which(ki67p3.raw.d$deid==lab & ki67p3.raw.d$surgical.number==acc_num & ki67p3.raw.d$field.name!="hot-spot"),]
temp
unique(ki67p3.raw.d$field.name)
get_field_type_const <- function(x){
return(switch(x,
"negative"="Ki67Score.FIELD_TYPE_NEG",
"low"="Ki67Score.FIELD_TYPE_LOW",
"medium"="Ki67Score.FIELD_TYPE_MED",
"high"="Ki67Score.FIELD_TYPE_HIGH"
))
}
fields <- list()
for (i in 1:nrow(temp)) {
fields[[i]] <- c(
"pCount"=temp$count.pos.first.100[i],
"nCount"=min(100,temp$count.total[i])-temp$count.pos.first.100[i],
"type"=get_field_type_const(temp$field.name[i])
)
}
fields
temp
ki67p3.ug.d[lab,acc_num]
rownames(ki67p3.ug.d)
ki67p3.ug.d[acc_num,lab]
ki67p3.wg.d[acc_num,lab]
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
library(ki67p3b)
ki67p3b.raw[1:3,]
data("ki67p3b.raw")
data("ki67p3b.ug.ws")
data("ki67p3b.wg.ws")
ki67p3b.raw[1:3,]
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
temp
dim(temp)
sink()
dim(temp)
sink()
sink()
dim(temp)
temp
temp$count.pos.first.100[i]
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
sum(temp$field.name=="negative")
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
source('~/workspace/js/Ki67Counter/test cases/unit_tests/generate_test_data.R')
quit()
